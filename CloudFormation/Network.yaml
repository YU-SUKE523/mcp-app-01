AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS Resources:  Template for NetworkResource

Parameters: 
  SystemName:
    Description: SystemName
    Type: String
    Default: System Name

Resources:
#--------------------------------------------------
# - ManagedPolicy
#--------------------------------------------------
  AllowFlowLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [!Ref SystemName, allow, flowlogs, policy]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: '*'
      Roles:
        - !Ref 'FlowLogsRole'
      Path: "/"

#--------------------------------------------------
# - Role
#--------------------------------------------------
  FlowLogsRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: !Join ["-", [!Ref SystemName, flowlogs, role]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole

#--------------------------------------------------
# - VPC
#--------------------------------------------------
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, vpc]]
      - Key: System
        Value: !Ref SystemName        
        

#--------------------------------------------------
# - Flowlog
#--------------------------------------------------
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref LogGroup
      LogFormat: '${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status} ${vpc-id} ${subnet-id} ${instance-id} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr} ${az-id} ${sublocation-type} ${sublocation-id} ${pkt-src-aws-service} ${pkt-dst-aws-service} ${flow-direction} ${traffic-path}'
      ResourceId: !Ref vpc
      ResourceType: VPC
      TrafficType: ALL
    
#--------------------------------------------------
# - LogGroup
#--------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "", [/aws/vpc/,!Ref SystemName]]
      RetentionInDays: 365  

#--------------------------------------------------
# - Network ACL
#--------------------------------------------------
  nacl:
   Type: AWS::EC2::NetworkAcl
   Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, nacl]]
      - Key: System
        Value: !Ref SystemName        
        

  naclentry01:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref nacl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  naclentry02:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref nacl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

#--------------------------------------------------
# - DHCP Option Set
#--------------------------------------------------
  dhcpoptions: 
      Type: AWS::EC2::DHCPOptions
      Properties: 
          DomainName: !Join ["", [!Sub '${AWS::Region}', ".compute.internal"]]
          DomainNameServers: 
            - AmazonProvidedDNS
          Tags: 
            - Key: Name
              Value: !Join ["-", [!Ref SystemName, dhcp]]
            - Key: System
              Value: !Ref SystemName        
              

  dhcpoptionsassosiation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref vpc
      DhcpOptionsId: !Ref dhcpoptions


#--------------------------------------------------
# - Internet Gateway(IGW)
#--------------------------------------------------
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, igw]]
        - Key: System
          Value: !Ref SystemName        
          

  AttachmentIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref vpc

#--------------------------------------------------
# - Subnet
#--------------------------------------------------
  publicsubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [ 0, !Cidr [ 10.0.0.0/20, 12, 8 ]]
      AvailabilityZone: !Join ["", [!Sub '${AWS::Region}', "a"]]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, public, subnet, '01']]
      - Key: System
        Value: !Ref SystemName        


  publicsubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [ 1, !Cidr [ 10.0.0.0/20, 12, 8 ]]
      AvailabilityZone: !Join ["", [!Sub '${AWS::Region}', "c"]]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, public, subnet, '02']]
      - Key: System
        Value: !Ref SystemName        


  appsubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc 
      CidrBlock: !Select [ 2, !Cidr [ 10.0.0.0/20, 12, 8 ]]
      AvailabilityZone: !Join ["", [!Sub '${AWS::Region}', "a"]]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, private, appsubnet, '01']]
      - Key: System
        Value: !Ref SystemName        

  
  appsubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  !Ref vpc
      CidrBlock: !Select [ 3, !Cidr [ 10.0.0.0/20, 12, 8 ]]
      AvailabilityZone: !Join ["", [!Sub '${AWS::Region}', "c"]]
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref SystemName, private, appsubnet, '02']]
      - Key: System
        Value: !Ref SystemName        
    


#--------------------------------------------------
# - SubnetNetworkAclAssociation
#--------------------------------------------------
  publicsubnet01NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicsubnet01
      NetworkAclId: !Ref nacl

  publicsubnet02NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicsubnet02
      NetworkAclId: !Ref nacl

  appsubnet01NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref appsubnet01
      NetworkAclId: !Ref nacl

  appsubnet02NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref appsubnet02
      NetworkAclId: !Ref nacl


#--------------------------------------------------
# - Elastic IP(EIP)
#--------------------------------------------------
  NGWEIP01:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NGWEIP02:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

#--------------------------------------------------
# - NAT Gateway(NGW)
#--------------------------------------------------
  NGW01:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NGWEIP01.AllocationId
      SubnetId: !Ref publicsubnet01
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, ngw01]]
        - Key: System
          Value: !Ref SystemName        

          
  NGW02:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NGWEIP02.AllocationId
      SubnetId: !Ref publicsubnet02
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref SystemName, ngw02]]
        - Key: System
          Value: !Ref SystemName        


#--------------------------------------------------
# - RouteTable
#--------------------------------------------------
  publicsubnetRT: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref vpc
      Tags: 
        - Key: Name
          Value: !Join ["-", [ !Ref SystemName, publicsubnet, rt]]

  publicsubnetRTAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet01
      RouteTableId: !Ref publicsubnetRT

  publicsubnetRTAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet02
      RouteTableId: !Ref publicsubnetRT 
     
  appsubnet01RT: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref vpc
      Tags: 
        - Key: Name
          Value: !Join ["-", [ !Ref SystemName, appsubnet01, rt]]

  appsubnet01RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref appsubnet01
      RouteTableId: !Ref appsubnet01RT


  appsubnet02RT: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref vpc
      Tags: 
        - Key: Name
          Value: !Join ["-", [ !Ref SystemName, appsubnet02, rt]]

  appsubnet02RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref appsubnet02
      RouteTableId: !Ref appsubnet02RT


#--------------------------------------------------
# - Route
#--------------------------------------------------
  publicsubnetRTRoute01:
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref publicsubnetRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
        
  appsubnet01RTRoute01:
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref appsubnet01RT
      DestinationCidrBlock: 0.0.0.0/0  
      NatGatewayId: !Ref NGW01

  appsubnet02RTRoute01: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref appsubnet02RT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NGW02

# ------------------------------------------------------------#
# Create s3 End Point for appbucket and docker
# ------------------------------------------------------------#
  ecss3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:                               
      ServiceName: !Join ["",["com.amazonaws.", !Sub '${AWS::Region}',".s3"]]
      RouteTableIds: 
        - !Ref appsubnet01RT
        - !Ref appsubnet02RT
      VpcEndpointType: Gateway               
      VpcId:
        !Ref vpc
      PolicyDocument: {
        "Version": "2008-10-17",
        "Statement": [
          {
            "Sid": "Access-to-specific-bucket-only",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:ListBucket",
                "s3:HeadObject",
                "s3:DeleteObject"
            ],
            "Resource":  "*"
          }              
        ]
      }     


# ------------------------------------------------------------#
# Create SG
# ------------------------------------------------------------#
  albsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ["-", [!Ref SystemName, "alb-sg" ]]
      GroupDescription:
        Fn::Join: ["-", [!Ref SystemName, "alb-sg" ]]
      VpcId: !Ref vpc
      Tags:
      - Key: System
        Value: !Ref SystemName

      - Key: Name
        Value: !Join ["-", [ !Ref SystemName, "alb-sg" ]]

  albIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref albsg
      IpProtocol: TCP
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      Description: Internet
  albEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref albsg
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref appsg
      Description: app-sg

  appsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ["-", [!Ref SystemName, "app-sg" ]]
      GroupDescription:
        Fn::Join: ["-", [!Ref SystemName, "app-sg" ]]
      VpcId: !Ref vpc
      Tags:
      - Key: System
        Value: !Ref SystemName

      - Key: Name
        Value: !Join ["-", [ !Ref SystemName, "app-sg" ]]
  appsgIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref appsg
      IpProtocol: TCP
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref albsg
      Description: alb-sg
  appsgEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref appsg
      IpProtocol: TCP
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      Description: Internet

Outputs:
  FlowLogsRole:
    Value: !GetAtt FlowLogsRole.Arn
    Export:
      Name: !Join ["-", [!Ref SystemName, flowlogs, role, arn]]
  vpcid:
    Value: !Ref vpc
    Export:
      Name: !Join ["-", [!Ref SystemName, vpc, id]]
  vpccidr:
    Value: !GetAtt vpc.CidrBlock
    Export:
      Name: !Join ["-", [!Ref SystemName, vpc, cidr]]
  naclid:
    Value: !Ref nacl
    Export:
      Name: !Join ["-", [!Ref SystemName, nacl, id]]
  IGW:
    Value: !Ref IGW
    Export:
      Name: !Join ["-", [!Ref SystemName, igw, id]]
  LogGroup:
    Value: !Ref LogGroup
    Export:
      Name: !Join ["-", [!Ref SystemName, vpc, loggroup, name]]
  publicsubnet01:
    Value: !Ref publicsubnet01
    Export:
      Name: !Join ["-", [!Ref SystemName, public, subnet, '01', id]]
  publicsubnet02:
    Value: !Ref publicsubnet02
    Export:
      Name: !Join ["-", [!Ref SystemName, public, subnet, '02', id]]     
  appsubnet01:
    Value: !Ref appsubnet01
    Export:
      Name: !Join ["-", [!Ref SystemName, private, appsubnet, '01', id]]
  appsubnet02:
    Value: !Ref appsubnet02
    Export:
      Name: !Join ["-", [!Ref SystemName, private, appsubnet, '02', id]]      
  NGW01:
    Value: !Ref NGW01
    Export:
      Name: !Join ["-", [!Ref SystemName, ngw01, id]]
  NGW02:
    Value: !Ref NGW02
    Export:
      Name: !Join ["-", [!Ref SystemName, ngw02, id]]
  publicsubnetRT:
    Value: !Ref publicsubnetRT
    Export:
      Name: !Join ["-", [ !Ref SystemName, publicsubnet, rt, id]]
  appsubnet01RT:
    Value: !Ref appsubnet01RT
    Export:
      Name: !Join ["-", [ !Ref SystemName, appsubnet01, rt, id]]
  appsubnet02RT:
    Value: !Ref appsubnet02RT
    Export:
      Name: !Join ["-", [ !Ref SystemName, appsubnet02, rt, id]]
  albsg:
    Value: !Ref albsg
    Export:
      Name: !Join ["-", [ !Ref SystemName, "alb-sg" ,id]]
  appsg:
    Value: !Ref appsg
    Export:
      Name: !Join ["-", [ !Ref SystemName, "app-sg" ,id]]
